[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 9f33dd5..a826037 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -1,2 +1,3 @@[m
 vendor/[m
[31m-.idea/[m
\ No newline at end of file[m
[32m+[m[32m.idea/[m
[32m+[m[32mnotes.txt[m
\ No newline at end of file[m
[1mdiff --git a/src/Meta/Helpers/MetaCollection.php b/src/Meta/Helpers/MetaCollection.php[m
[1mindex 980c4cf..5368c94 100644[m
[1m--- a/src/Meta/Helpers/MetaCollection.php[m
[1m+++ b/src/Meta/Helpers/MetaCollection.php[m
[36m@@ -26,7 +26,7 @@[m [mclass MetaCollection extends Collection[m
     {[m
         $this->model = $model;[m
         $this->temporaryItems = clone $model->getLoadedMeta();[m
[31m-        parent::__construct($this->model->getLoadedMeta()->pluck('value','key'));[m
[32m+[m[32m        parent::__construct($this->model->getLoadedMeta()->pluck('value', 'key'));[m
     }[m
 [m
     /**[m
[36m@@ -37,82 +37,156 @@[m [mclass MetaCollection extends Collection[m
      */[m
     public function __get($property)[m
     {[m
[31m-        $checkHasMeta = $this->model->getLoadedMeta()->where('key', $property)->where('value', '!=', null);[m
[32m+[m[32m        $checkHasMeta = $this->model->getLoadedMeta()[m
[32m+[m[32m            ->where('key', $property)->where('value', '!=', null);[m
[32m+[m
         if ($checkHasMeta->count()) {[m
[31m-            return Meta::returnValue($this->model->getLoadedMeta() , $property);[m
[31m-        }[m
[31m-        if(strpos($property,'_')){[m
[31m-            $property = str_replace('_',' ',$property);[m
[31m-            return $this->__get($property);[m
[31m-        }elseif(strpos($property,' ')){[m
[31m-            $property = str_replace(' ','-',$property);[m
[31m-            return $this->__get($property);[m
[32m+[m[32m            return Meta::returnValue($this->model->getLoadedMeta(), $property);[m
         }[m
[31m-        return null; // if value was not founded return null[m
[32m+[m[32m        return $this->searchMetaName($property);[m
     }[m
 [m
     /**[m
[31m-     * set new meta value [m
[31m-     * [m
[32m+[m[32m     * set new meta value[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param $property[m
[32m+[m[32m     * @param $value[m
      * @return void[m
      */[m
[31m-    public function __set($property , $value)[m
[32m+[m[32m    public function __set($property, $value)[m
     {[m
[31m-        $inTemporaryItems = $this->temporaryItems->where('key' , $property);[m
[31m-        if($inTemporaryItems->count()){[m
[31m-            $inTemporaryItems = $inTemporaryItems->first();[m
[31m-            $inTemporaryItems->value = $value;[m
[31m-            $inTemporaryItems->changed = true;[m
[31m-            $inTemporaryItems->alreadyExists = true;[m
[31m-        }else{[m
[31m-            $meta = new \Zoha\Meta\Models\Meta();[m
[31m-            $meta->key = $property;[m
[31m-            $meta->value = $value;[m
[31m-            $meta->changed = true;[m
[31m-            $inTemporaryItems->alreadyExists = false;[m
[31m-            $this->temporaryItems->add($meta);[m
[32m+[m[32m        $inTemporaryItems = $this->temporaryItems->where('key', $property);[m
[32m+[m[32m        if ($inTemporaryItems->count()) {[m
[32m+[m[32m            $this->updateTemporaryMeta($value, $inTemporaryItems);[m
[32m+[m[32m        } else {[m
[32m+[m[32m            $this->createTemporaryMeta($property, $value, $inTemporaryItems);[m
         }[m
     }[m
 [m
     /**[m
[31m-     * save meta changes [m
[31m-     * [m
[32m+[m[32m     * save meta changes[m
[32m+[m[32m     *[m
      * return bool[m
      */[m
     public function save()[m
     {[m
[31m-        $changedItems = $this->temporaryItems->where('changed' , true);[m
[31m-        if($changedItems->count()){[m
[31m-            $existsItems = [];[m
[31m-            $newItems = [];[m
[31m-            foreach($changedItems as $changedItem){[m
[31m-                if($changedItem->alreadyExists === true){[m
[31m-                    $existsItems[$changedItem->key] = $changedItem->value;[m
[31m-                }else{[m
[31m-                    $newItems[$changedItem->key] = $changedItem->value;[m
[31m-                }[m
[31m-            }[m
[31m-            if(count($existsItems)){[m
[31m-                foreach($existsItems as $existsItemKey => $existsItemValue){[m
[31m-                    $onProcessMetaItem = $this->model->getLoadedMeta()->where('key' , $existsItemKey)->first();[m
[31m-                    unset($onProcessMetaItem->changed);[m
[31m-                    unset($onProcessMetaItem->alreadyExists);[m
[31m-                    $result = $this->model->updateMeta($existsItemKey , $existsItemValue);[m
[31m-                    if($result == false){[m
[31m-                        $newItems[$existsItemKey] = $existsItemValue;[m
[31m-                    }[m
[31m-                }[m
[32m+[m[32m        $changedItems = $this->temporaryItems->where('changed', true);[m
[32m+[m[32m        if ($changedItems->count()) {[m
[32m+[m[32m            return $this->updateDatabaseAndLoadedMetaList($changedItems);[m
[32m+[m[32m        }[m
[32m+[m[32m        return false;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * find proper meta name from given property to __get method[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param $property[m
[32m+[m[32m     * @return Collection|null|string[m
[32m+[m[32m     */[m
[32m+[m[32m    protected function searchMetaName($property)[m
[32m+[m[32m    {[m
[32m+[m[32m        return (strpos($property, '_')) ?[m
[32m+[m[32m            $this->__get(str_replace('_', ' ', $property)) ?[m
[32m+[m[32m                $this->__get(str_replace('_', ' ', $property)) :[m
[32m+[m[32m                $this->__get(str_replace('_', '-', $property))[m
[32m+[m[32m            : null;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * updating an existing meta ( temporary )[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param $value[m
[32m+[m[32m     * @param $inTemporaryItems[m
[32m+[m[32m     */[m
[32m+[m[32m    protected function updateTemporaryMeta($value, $inTemporaryItems): void[m
[32m+[m[32m    {[m
[32m+[m[32m        $inTemporaryItems = $inTemporaryItems->first();[m
[32m+[m[32m        $inTemporaryItems->value = $value;[m
[32m+[m[32m        $inTemporaryItems->changed = true;[m
[32m+[m[32m        $inTemporaryItems->alreadyExists = true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * create new temporary meta[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param $property[m
[32m+[m[32m     * @param $value[m
[32m+[m[32m     * @param $inTemporaryItems[m
[32m+[m[32m     */[m
[32m+[m[32m    protected function createTemporaryMeta($property, $value, $inTemporaryItems): void[m
[32m+[m[32m    {[m
[32m+[m[32m        $meta = new \Zoha\Meta\Models\Meta();[m
[32m+[m[32m        $meta->key = $property;[m
[32m+[m[32m        $meta->value = $value;[m
[32m+[m[32m        $meta->changed = true;[m
[32m+[m[32m        $inTemporaryItems->alreadyExists = false;[m
[32m+[m[32m        $this->temporaryItems->add($meta);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * create new items in database from temporary list[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param $newItems[m
[32m+[m[32m     */[m
[32m+[m[32m    protected function finalCreateMetaFromTemporary($newItems): void[m
[32m+[m[32m    {[m
[32m+[m[32m        foreach ($newItems as $newItemKey => $newItemValue) {[m
[32m+[m[32m            $this->model->loadedMeta = $this->model->getLoadedMeta()->reject(function ($value) use ($newItemKey[m
[32m+[m[32m            ) {[m
[32m+[m[32m                return $value->key === $newItemKey;[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m        $this->model->createMeta($newItems);[m
[32m+[m[